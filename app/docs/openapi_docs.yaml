openapi: "3.0.0"
info:
  description: Documentation for the Weding Shop API.
  version: 0.0.1
  title: The Wedding Shop API
components:
  parameters:
    q:
      name: q
      in: query
      required: false
      description: >
        JSON string used to filter, limit and sort the returned objects.
        Supported keys are the following (all optional)
          * filters: list of dictionaries in the format {"name":"<name_of_field>","op":"<operator>","val":"<value_to_match>"}
          * limit: integer, maximum number of items to return
          * offset: integer, offset into the result set of the returned list
          * order_by: list of dictionaries in the format {"field":"<name_of_field>","direction":"<sort_direction>"}
        Format to use for filters is defined in this URL:
            <https://flask-restless.readthedocs.io/en/latest/filtering.html#filter-objects>
        Example of usage
            <uri>?q={"filters":[{"name":"full_name","op":"like","val":"John%"}],"limit":10,"offset":100,"order_by":[{"field":"full_name","direction":"asc"}]}
      schema:
        type: string
        example: '{"limit": 50}'
    user_id:
      name: user_id
      in: path
      required: true
      description: Resource unique identifier.
      schema:
        type: string
      example: bf0622b8-6509-4037-a618-7b3dc685a99e
    user_list_id:
      name: user_list_id
      in: path
      required: true
      description: Resource unique identifier.
      schema:
        type: integer
      example: 1
  responses:
    SuccessRead:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              count:
                description: Number of total results that match the filters specified in the request, ignoring limit and offset.
                type: integer
                example: 100
              num_results:
                type: integer
                example: 100
              objects:
                type: array
              page:
                type: integer
                example: 1
              total_pages:
                type: integer
                example: 10
    SuccessCreate:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: A new record was added successfully into the table.
              resource_id:
                type: integer
                example: 1
    SuccessDelete:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An existing record was deleted successfully from the table.
    SuccessUpdate:
      description: Successful operation
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: An existing record was updated successfully from the table.
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            properties:
              error_msg:
                type: string
                example: Invalid field.
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            properties:
              error_msg:
                type: string
                example: Invalid permissions.
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            properties:
              error_msg:
                type: string
                example: The resource was not found.
    NotImplemented:
      description: Not implemented
      content:
        application/json:
          schema:
            properties:
              error_msg:
                type: string
                example: This version is not implemented yet.
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            properties:
              error_msg:
                type: string
                example: Invalid token.
  schemas:
    Healthcheck:
      description: Status of the service checker
      type: object
      properties:
        message:
          type: string
          example: "Welcome to The Wedding Shop API!"
    Product:
      description: Product general information.
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Tea pot
        brand:
          type: string
          example: Le Creuset
        price:
          type: float
          example: 47.00
        in_stock_quantity:
          type: integer
          example: 50
        create_date:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00'
        write_date:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00'
    User:
      description: User information.
      type: object
      properties:
        id:
          type: string
          example: bf0622b8-6509-4037-a618-7b3dc685a99e
        login:
          type: string
          example: user@theweddingshop.co.uk
        name:
          type: string
          example: John Doe
        create_date:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00'
        last_login:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00'
        write_date:
          type: string
          format: date-time
          example: '2020-01-01T00:00:00'
    UserList:
      description: List of products that belongs to a user. This products could be in the wish list (pending) or purchased.
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: object
          $ref: '#/components/schemas/User'
        product_id:
          type: object
          $ref: '#/components/schemas/Product'
        state:
          type: string
          example: wish
          enum: ['wish', 'purchased', 'cancelled']
tags:
  - name: healthcheck
    description: Service status information.
  - name: product
    description: Products information.
  - name: user
    description: Users information.
  - name: user_list
    description: User Lists information.
paths:
  /healthcheck:
    get:
      tags:
        - healthcheck
      summary: Check the status of the service
      description: Call this endpoint to check the status of the service
      operationId: healthcheck
      responses:
        '200':
          description: Healthy service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthcheck'
  /product:
    get:
      tags:
        - product
      summary: Retrieve the users.
      description: Call this endpoint to retrieve the users information.
      operationId: user
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/count'
                  num_results:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/num_results'
                  page:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/page'
                  total_pages:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/total_pages'
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /user:
    get:
      tags:
        - user
      summary: Retrieve the users.
      description: Call this endpoint to retrieve the users information.
      operationId: user
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/count'
                  num_results:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/num_results'
                  page:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/page'
                  total_pages:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/total_pages'
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /user/{user_id}/report:
    get:
      tags:
        - user
      summary: Display the user list report.
      description: Call this endpoint to print on screen the user list report.
      operationId: report_user_list
      parameters:
        - $ref: '#/components/parameters/user_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessRead'
  /user_list:
    get:
      tags:
        - user_list
      summary: Retrieve the user list of products.
      description: Call this endpoint to retrieve the products that are on the user list.
      operationId: user_list
      parameters:
        - $ref: '#/components/parameters/q'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/count'
                  num_results:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/num_results'
                  page:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/page'
                  total_pages:
                    $ref: '#/components/responses/SuccessRead/content/application%2Fjson/schema/properties/total_pages'
                  objects:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
    post:
      tags:
        - user_list
      summary: Create a record in the list.
      description: This endpoint allows to add a new product in the whish list.
      operationId: createUserList
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  $ref: '#/components/schemas/User/properties/id'
                product_id:
                  $ref: '#/components/schemas/Product/properties/id'
              required:
                - user_id
                - product_id
      responses:
        '201':
          $ref: '#/components/responses/SuccessCreate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /user_list/{user_list_id}:
    delete:
      tags:
        - user_list
      summary: Delete a user list product.
      description: Call this endpoint to delete a product from the user wish list.
      operationId: delete_user_list
      parameters:
        - $ref: '#/components/parameters/user_list_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessDelete'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /user_list/{user_list_id}/purchase:
    put:
      tags:
        - user_list
      summary: Purchase a user list product.
      description: Call this endpoint to purchase a product from the user wish list.
      operationId: purchase_user_list
      parameters:
        - $ref: '#/components/parameters/user_list_id'
      responses:
        '200':
          $ref: '#/components/responses/SuccessUpdate'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '501':
          $ref: '#/components/responses/NotImplemented'
